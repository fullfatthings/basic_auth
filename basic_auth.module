<?php
/**
 * @file
 * Provides a way to log into a Drupal site using Basic Auth while maintaining
 * Drupal's standard authentication process such as flood control and blocked
 * users.
 *
 * TODO:
 *   * Log out; As the browser persists the Basic Auth header, logging out
 *     results in you immediately getting logged back in. Possibly need an AJAX
 *     call which triggers a 401 and fails login to invalidate the header?!
 */


/**
 * Determine status of Basic Auth.
 *
 * @return bool
 *   TRUE if the system should be disabled.
 */
function basic_auth_status_disabled() {
  $enabled = basic_auth_variable_get('basic_auth_enabled');
  $cli = (drupal_is_cli() && basic_auth_variable_get('basic_auth_allow_cli'));
  $logged_in = user_is_logged_in();

  // Disabled if any of these are TRUE.
  return ($cli || !$enabled || $logged_in);
}


/**
 * Implements hook_init().
 */
function basic_auth_init() {
  // Cannot use hook_boot, as user.module and common.inc are not loaded.

  // Bail if the system is disabled.
  if (basic_auth_status_disabled()) {
    return;
  }

  // Attempt to authenticate user.
  $user = $pass = FALSE;
  // This CGI code is borrowed from the Shield module.
  if (substr(php_sapi_name(), 0, 3) == 'cgi') {
    // We have (some sort of) CGI.
    if (isset($_SERVER['REDIRECT_REMOTE_USER'])) {
      $auth_var = 'REDIRECT_REMOTE_USER';
    }
    else {
      $auth_var = 'REMOTE_USER';
    }
    if (!empty($_SERVER[$auth_var])) {
      list($user, $pass) = explode(':', base64_decode(substr($_SERVER[$auth_var], 6)));
    }
  }
  else {
    // We have mod_php.
    if (!empty($_SERVER['PHP_AUTH_USER']) && isset($_SERVER['PHP_AUTH_PW'])) {
      $user = $_SERVER['PHP_AUTH_USER'];
      $pass = $_SERVER['PHP_AUTH_PW'];
    }
  }

  if ($user && $pass) {
    // Try to login.
    $form_state = array(
      'values' => array(
        'name' => $user,
        'pass' => $pass,
      ),
    );
    user_login_name_validate(NULL, $form_state);
    user_login_authenticate_validate(NULL, $form_state);
    user_login_final_validate(NULL, $form_state);

    // Check this user has the Basic Auth permission.
    $account = user_load($form_state['uid']);
    if (!user_access('allow basic auth', $account)) {
      return;
    }

    if (!form_get_errors()) {
      user_login_submit(NULL, $form_state);
      drupal_goto(current_path());
      return;
    }
  }

  // No login attempt, is anonymous allowed?
  if (empty($user) && basic_auth_variable_get('basic_auth_allow_anonymous')) {
    // Anon is allowed, continue without prompting for auth.
    return;
  }

  basic_auth_send_401_unauthorized();
}


/**
 * Implements hook_page_alter().
 */
function basic_auth_page_alter(&$page) {
  // If Basic Auth is not disabled AND
  // We are triggering on 403's AND
  // The curernt page is a 403...
  if (!basic_auth_status_disabled() && basic_auth_variable_get('basic_auth_trigger_on_access_denied') && (drupal_get_http_header('Status') == '403 Forbidden')) {
    // Send a 401, but dont render the Authorization required page, keep the
    // Access Denied one.
    basic_auth_send_401_unauthorized(FALSE);
  }
}

/**
 * Send a 401 unauthorized header to the client to force a HTTP Auth.
 */
function basic_auth_send_401_unauthorized($render_page = TRUE) {
  $headers = array(
    'WWW-Authenticate' => 'Basic realm="' . check_plain(basic_auth_variable_get('basic_auth_realm')) . '"',
    'Status' => '401 Unauthorized',
  );

  drupal_send_headers($headers, TRUE);

  if ($render_page) {
    print drupal_render_page(t('Authorization required'));
    exit;
  }
}


/**
 * Implements hook_permission().
 */
function basic_auth_permission() {
  return array(
    'allow basic auth' => array(
      'title' => t('Allow login using Basic Auth'),
      'description' => t('Grants users with this permission ability to log in using HTTP Basic Auth.'),
    ),
    'administer basic auth' => array(
      'title' => t('Administer Basic Auth'),
      'description' => t('Allow users with this permission to configure the Basic Auth module.'),
    ),
  );
}


/**
 * Implements hook_menu().
 */
function basic_auth_menu() {
  $items = array();

  $items['admin/config/people/basic_auth'] = array(
    'title' => 'Configure Basic Auth',
    'description' => 'Change the settings for the Basic Auth module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('basic_auth_admin_form'),
    'access arguments' => array('administer basic auth'),
    'file' => 'basic_auth.admin.inc',
  );

  $items['basicauth'] = array(
    'title' => 'Force Basic Auth',
    'page callback' => 'basic_auth_send_401_unauthorized',
    'access callback' => 'basic_auth_force_basic_auth_access_callback',
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/**
 * Access callback for the 'basicauth' force path.
 *
 * Only available if enabled and the user is anonymous.
 *
 * @return bool
 *   Can we get to the force basic auth page?
 */
function basic_auth_force_basic_auth_access_callback() {
  return basic_auth_variable_get('basic_auth_enable_force_login_path') && user_is_anonymous();
}


/**
 * Wrapper for variable_get() to centralise default settings.
 *
 * @param string $name
 *   The variable to look up.
 *
 * @return mixed
 *   The value of the variable.
 */
function basic_auth_variable_get($name) {
  $defaults = array(
    'basic_auth_realm' => variable_get('site_name', 'Drupal'),
    'basic_auth_allow_cli' => TRUE,
    'basic_auth_enabled' => TRUE,
    'basic_auth_allow_anonymous' => FALSE,
    'basic_auth_enable_force_login_path' => TRUE,
    'basic_auth_trigger_on_access_denied' => TRUE,
  );

  return variable_get($name, $defaults[$name]);
}
